{"version":3,"sources":["components/LandingContainer/LandingContainer.jsx","components/ChatContainer/components/ChatTitle/ChatTitle.jsx","components/ChatContainer/components/Message/Message.jsx","components/ChatContainer/components/ChatBody/ChatBody.jsx","components/ChatContainer/components/ChatInput/ChatInput.jsx","components/ChatContainer/ChatContainer.jsx","components/Tab/Tab.jsx","App.jsx","index.js"],"names":["LandingContainer","props","useState","alert","setAlert","useEffect","nameInput","className","users","length","user","name","Container","icon","faSpinner","spin","size","onSubmit","e","preventDefault","setUser","uuid","submitName","InputGroup","Input","value","placeholder","onChange","handleNameInput","InputGroupAddon","addonType","Button","type","Alert","color","ChatTitle","chatWith","faUser","Message","message","text","isMyMessage","nextMessageSameUser","nextMessage","prevMessageSameUser","prevMessage","typingMessage","ChatBody","id","position","messages","map","idx","isTyping","ChatInput","messageInput","setMessageInput","sendMessage","target","onFocus","onBlur","isntTyping","faPaperPlane","ChatContainer","setNameInput","addUser","animateScroll","scrollToBottom","containerId","smooth","duration","find","person","activeTab","style","setIsTyping","Tab","float","onClick","toggleTab","pubnub","PubNub","keyConfiguration","Chat","usePubNub","setActiveTab","channels","addMessage","addListener","handleMessage","subscribe","publish","channel","tab","App","client","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.b3ff558c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { v4 as uuid } from 'uuid';\r\nimport {\r\n    Container,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    Input,\r\n    Button,\r\n    Alert\r\n} from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './LandingContainer.scss'\r\n\r\nconst LandingContainer = (props) => {\r\n    const [alert, setAlert] = useState(false);\r\n\r\n    const submitName = e => {\r\n        e.preventDefault();\r\n        if (props.nameInput) {\r\n            props.setUser({ name: props.nameInput, uuid: uuid() })\r\n        } else {\r\n            setAlert(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.nameInput) {\r\n            setAlert(false)\r\n        }\r\n    }, [props.nameInput])\r\n\r\n    return (\r\n        <div className={`Landing ${props.users.length > 1 ? 'hide' : 'show'}`}>\r\n\r\n            {props.user.name && props.users.length < 2 ? (\r\n                <Container>\r\n                    <p className=\"mb-4\">Waiting for other user...</p>\r\n                    <FontAwesomeIcon icon={faSpinner} spin size=\"2x\" />\r\n                </Container>\r\n            ) : (\r\n                <Container>\r\n                    <form onSubmit={e => submitName(e)}>\r\n                        <p className=\"mb-4\">Enter name to begin chatting</p>\r\n                        <InputGroup>\r\n                            <Input\r\n                                value={props.nameInput}\r\n                                placeholder=\"John Doe\"\r\n                                onChange={e => props.handleNameInput(e)}\r\n                            />\r\n                            <InputGroupAddon addonType=\"append\">\r\n                                <Button type=\"submit\">Submit</Button>\r\n                            </InputGroupAddon>\r\n                        </InputGroup>\r\n                        {\r\n                            alert ?\r\n                                <Alert color=\"danger\">\r\n                                    Please enter a name\r\n                                </Alert> :\r\n                                null\r\n                        }\r\n                    </form>\r\n                </Container>\r\n                )}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default LandingContainer\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './ChatTitle.scss';\r\n\r\nconst ChatTitle = (props) => {\r\n    return (\r\n        <div className=\"ChatTitle\">\r\n            {props.chatWith ? (\r\n                <div>\r\n                    <p>Chatting with</p>\r\n                    <div className=\"user-icon is-xxl\">\r\n                        <FontAwesomeIcon icon={faUser} />\r\n                    </div>\r\n                    <p>{props.chatWith.name}</p>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatTitle;\r\n","import React from 'react'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './Message.scss'\r\n\r\nconst Message = (props) => {\r\n    const { user, text } = props.message\r\n\r\n    const isMyMessage = user.uuid === props.user.uuid ? true : false;\r\n\r\n    const nextMessageSameUser =\r\n        props.nextMessage &&\r\n        props.nextMessage.user.uuid === user.uuid;\r\n\r\n    const prevMessageSameUser =\r\n        props.prevMessage &&\r\n        props.prevMessage.user.uuid === user.uuid;\r\n\r\n    if (props.typingMessage) {\r\n        return (\r\n            <div className=\"Message recieved is-typing\">\r\n                <div className=\"user-icon is-xl\">\r\n                    <FontAwesomeIcon icon={faUser} />\r\n                </div>\r\n                <div className=\"text\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (isMyMessage) {\r\n        return (\r\n            <div className=\"Message sent\">\r\n                <div className={`text ${prevMessageSameUser ? 'same-user' : ''}`}>\r\n                    {text}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"Message recieved\">\r\n            { !nextMessageSameUser ? (\r\n                <div className=\"user-icon is-xl\">\r\n                    <FontAwesomeIcon icon={faUser} />\r\n                </div>\r\n            ) : null}\r\n            <div className={`text ${prevMessageSameUser ? 'same-user' : ''}`}>\r\n                {text}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\n\r\nimport Message from '../Message';\r\n\r\nimport './ChatBody.scss'\r\n\r\nconst ChatBody = (props) => {\r\n    return (\r\n        <div\r\n            className=\"ChatBody\"\r\n            id={`chat-body-${props.position}`}\r\n        >\r\n            {props.messages.map((message, idx) => (\r\n                <Message\r\n                    key={idx}\r\n                    message={message}\r\n                    user={props.user}\r\n                    nextMessage={props.messages[idx + 1]}\r\n                    prevMessage={props.messages[idx - 1]}\r\n                />\r\n            ))}\r\n            {\r\n                props.isTyping.user.uuid &&\r\n                props.isTyping.user.uuid !== props.user.uuid ? (\r\n                    <Message\r\n                        typingMessage\r\n                        message={{ user: props.user }}\r\n                        user={props.isTyping.user}\r\n                    />\r\n                ) : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody\r\n","import React, { useState } from 'react';\r\nimport {\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    Input,\r\n    Button\r\n} from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './ChatInput.scss';\r\n\r\nconst ChatInput = (props) => {\r\n    const [messageInput, setMessageInput] = useState('');\r\n\r\n    const sendMessage = () => {\r\n        props.sendMessage(messageInput);\r\n\r\n        setMessageInput('');\r\n    }\r\n\r\n    return (\r\n        <form\r\n            className=\"ChatInput\"\r\n            onSubmit={e => {\r\n                e.preventDefault();\r\n                sendMessage();\r\n            }}\r\n        >\r\n            <InputGroup>\r\n                <Input\r\n                    value={messageInput}\r\n                    placeholder=\"Start a message\"\r\n                    onChange={e => setMessageInput(e.target.value)}\r\n                    onFocus={props.isTyping}\r\n                    onBlur={props.isntTyping}\r\n                />\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button type=\"submit\" color=\"primary\">\r\n                        <FontAwesomeIcon icon={faPaperPlane} />\r\n                    </Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ChatInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { animateScroll } from 'react-scroll';\r\n\r\nimport LandingContainer from '../LandingContainer';\r\n\r\nimport ChatTitle from './components/ChatTitle';\r\nimport ChatBody from './components/ChatBody';\r\nimport ChatInput from './components/ChatInput';\r\n\r\nimport './ChatContainer.scss';\r\n\r\nconst ChatContainer = (props) => {\r\n    const [nameInput, setNameInput] = useState('');\r\n    const [user, setUser] = useState({\r\n        name: '',\r\n        uuid: ''\r\n    });\r\n\r\n    const { addUser, users, position, messages } = props;\r\n\r\n    useEffect(() => {\r\n        if (user.name) {\r\n            user.position = position;\r\n            addUser([...users, user])\r\n        }\r\n        // linter wants to add users to dependencies\r\n        // but it breaks code\r\n        // eslint-disable-next-line\r\n    }, [user, addUser, position]);\r\n\r\n    useEffect(() => {\r\n        // Scroll to bottom of ChatBody after new message\r\n        animateScroll.scrollToBottom({\r\n            containerId: \"chat-body-\" + position,\r\n            smooth: true,\r\n            duration: 200\r\n        });\r\n    }, [messages, position]);\r\n\r\n    const handleNameInput = e => {\r\n        setNameInput(e.target.value);\r\n    }\r\n\r\n    const isTabOpen = () => {\r\n        return props.activeTab === position ? 'tab-active' : '';\r\n    }\r\n\r\n    const sendMessage = message => {\r\n        props.sendMessage(message, user);\r\n    }\r\n\r\n    const isTyping = () => {\r\n        props.setIsTyping({ user });\r\n    }\r\n\r\n    const isntTyping = () => {\r\n        props.setIsTyping({ user: '' });\r\n    }\r\n\r\n    const chatWith = users.find(person => person.uuid !== user.uuid);\r\n\r\n    return (\r\n        <div\r\n            className={`ChatContainer ${isTabOpen()}`}\r\n            style={{[position]: 0}}\r\n        >\r\n            <LandingContainer\r\n                handleNameInput={handleNameInput}\r\n                nameInput={nameInput}\r\n                user={user}\r\n                setUser={setUser}\r\n                users={users}\r\n            />\r\n            <ChatTitle\r\n                chatWith={chatWith}\r\n            />\r\n            <ChatBody\r\n                position={position}\r\n                messages={messages}\r\n                user={user}\r\n                isTyping={props.isTyping}\r\n            />\r\n            <ChatInput\r\n                sendMessage={sendMessage}\r\n                isTyping={isTyping}\r\n                isntTyping={isntTyping}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatContainer;\r\n","import React from 'react'\r\n\r\nimport './Tab.scss';\r\n\r\nconst Tab = (props) => {\r\n    return (\r\n        <div \r\n            className={`Tab ${props.activeTab === props.position ? 'active' : ''}`}\r\n            style={{float: props.position}}\r\n            onClick={() => props.toggleTab(props.position)}\r\n        >\r\n            <p>\r\n                {\r\n                    props.user ? \r\n                        props.user.name : \r\n                        `User ${props.position === 'left' ? '1' : '2'}`\r\n                }\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tab;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider, usePubNub } from 'pubnub-react';\r\n\r\nimport ChatContainer from './components/ChatContainer';\r\nimport Tab from './components/Tab';\r\n\r\nimport keyConfiguration from \"./config/pubnub-keys\";\r\n\r\nimport './App.scss';\r\n\r\nconst pubnub = new PubNub(keyConfiguration);\r\n\r\nconst Chat = () => {\r\n    const pubnub = usePubNub();\r\n\r\n    const [activeTab, setActiveTab] = useState('left');\r\n    const [channels] = useState(['channel1']);\r\n    const [messages, addMessage] = useState([]);\r\n    const [users, addUser] = useState([]);\r\n    const [isTyping, setIsTyping] = useState({ user: {} });\r\n\r\n    useEffect(() => {\r\n        pubnub.addListener({ message: handleMessage });\r\n        pubnub.subscribe({ channels });\r\n    }, [pubnub, channels]);\r\n\r\n    const handleMessage = e => {\r\n        const { text, user } = e.message;\r\n        addMessage(messages => [...messages, { text, user }]);\r\n    };\r\n\r\n    const sendMessage = (message, user) => {\r\n        if (message) {\r\n            pubnub.publish({ channel: channels[0], message: { text: message, user } });\r\n        }\r\n    };\r\n\r\n    const toggleTab = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"tabs\">\r\n                <Tab\r\n                    position=\"left\"\r\n                    activeTab={activeTab}\r\n                    toggleTab={toggleTab}\r\n                    user={users.find(user => user.position === 'left')}\r\n                />\r\n                <Tab\r\n                    position=\"right\"\r\n                    activeTab={activeTab}\r\n                    toggleTab={toggleTab}\r\n                    user={users.find(user => user.position === 'right')}\r\n                />\r\n            </div>\r\n            <ChatContainer\r\n                position=\"left\"\r\n                sendMessage={sendMessage}\r\n                messages={messages}\r\n                users={users}\r\n                addUser={addUser}\r\n                activeTab={activeTab}\r\n                isTyping={isTyping}\r\n                setIsTyping={setIsTyping}\r\n            />\r\n            <ChatContainer\r\n                position=\"right\"\r\n                sendMessage={sendMessage}\r\n                messages={messages}\r\n                users={users}\r\n                addUser={addUser}\r\n                activeTab={activeTab}\r\n                isTyping={isTyping}\r\n                setIsTyping={setIsTyping}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst App = () => {\r\n    return (\r\n        <PubNubProvider client={pubnub}>\r\n            <Chat />\r\n        </PubNubProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}